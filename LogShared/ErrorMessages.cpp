#include "ErrorMessages.h"
#include <comdef.h>
#include <atlcomcli.h>
#include <StringUtils.h>

std::wstring GetWindowsErrorMessage(HRESULT hr)
{
    //#define CASE_RETURN_NAME(x) case x: return L#x;
    // These 'advanced' error codes from the WinInet API are not covered by the system messages.
    //switch (HRESULT_CODE(hr))
    //{
    //    CASE_RETURN_NAME(ERROR_INTERNET_OUT_OF_HANDLES);
    //    CASE_RETURN_NAME(ERROR_INTERNET_TIMEOUT);
    //    CASE_RETURN_NAME(ERROR_INTERNET_EXTENDED_ERROR);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INTERNAL_ERROR);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INVALID_URL);
    //    CASE_RETURN_NAME(ERROR_INTERNET_UNRECOGNIZED_SCHEME);
    //    CASE_RETURN_NAME(ERROR_INTERNET_NAME_NOT_RESOLVED);
    //    CASE_RETURN_NAME(ERROR_INTERNET_PROTOCOL_NOT_FOUND);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INVALID_OPTION);
    //    CASE_RETURN_NAME(ERROR_INTERNET_BAD_OPTION_LENGTH);
    //    CASE_RETURN_NAME(ERROR_INTERNET_OPTION_NOT_SETTABLE);
    //    CASE_RETURN_NAME(ERROR_INTERNET_SHUTDOWN);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INCORRECT_USER_NAME);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INCORRECT_PASSWORD);
    //    CASE_RETURN_NAME(ERROR_INTERNET_LOGIN_FAILURE);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INVALID_OPERATION);
    //    CASE_RETURN_NAME(ERROR_INTERNET_OPERATION_CANCELLED);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INCORRECT_HANDLE_TYPE);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INCORRECT_HANDLE_STATE);
    //    CASE_RETURN_NAME(ERROR_INTERNET_NOT_PROXY_REQUEST);
    //    CASE_RETURN_NAME(ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND);
    //    CASE_RETURN_NAME(ERROR_INTERNET_BAD_REGISTRY_PARAMETER);
    //    CASE_RETURN_NAME(ERROR_INTERNET_NO_DIRECT_ACCESS);
    //    CASE_RETURN_NAME(ERROR_INTERNET_NO_CONTEXT);
    //    CASE_RETURN_NAME(ERROR_INTERNET_NO_CALLBACK);
    //    CASE_RETURN_NAME(ERROR_INTERNET_REQUEST_PENDING);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INCORRECT_FORMAT);
    //    CASE_RETURN_NAME(ERROR_INTERNET_ITEM_NOT_FOUND);
    //    CASE_RETURN_NAME(ERROR_INTERNET_CANNOT_CONNECT);
    //    CASE_RETURN_NAME(ERROR_INTERNET_CONNECTION_ABORTED);
    //    CASE_RETURN_NAME(ERROR_INTERNET_CONNECTION_RESET);
    //    CASE_RETURN_NAME(ERROR_INTERNET_FORCE_RETRY);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INVALID_PROXY_REQUEST);
    //    CASE_RETURN_NAME(ERROR_INTERNET_NEED_UI);
    //    CASE_RETURN_NAME(ERROR_INTERNET_HANDLE_EXISTS);
    //    CASE_RETURN_NAME(ERROR_INTERNET_SEC_CERT_DATE_INVALID);
    //    CASE_RETURN_NAME(ERROR_INTERNET_SEC_CERT_CN_INVALID);
    //    CASE_RETURN_NAME(ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR);
    //    CASE_RETURN_NAME(ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR);
    //    CASE_RETURN_NAME(ERROR_INTERNET_MIXED_SECURITY);
    //    CASE_RETURN_NAME(ERROR_INTERNET_CHG_POST_IS_NON_SECURE);
    //    CASE_RETURN_NAME(ERROR_INTERNET_POST_IS_NON_SECURE);
    //    CASE_RETURN_NAME(ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INVALID_CA);
    //    CASE_RETURN_NAME(ERROR_INTERNET_CLIENT_AUTH_NOT_SETUP);
    //    CASE_RETURN_NAME(ERROR_INTERNET_ASYNC_THREAD_FAILED);
    //    CASE_RETURN_NAME(ERROR_INTERNET_REDIRECT_SCHEME_CHANGE);
    //    CASE_RETURN_NAME(ERROR_INTERNET_DIALOG_PENDING);
    //    CASE_RETURN_NAME(ERROR_INTERNET_RETRY_DIALOG);
    //    CASE_RETURN_NAME(ERROR_INTERNET_HTTPS_HTTP_SUBMIT_REDIR);
    //    CASE_RETURN_NAME(ERROR_INTERNET_INSERT_CDROM);
    //    CASE_RETURN_NAME(ERROR_INTERNET_FORTEZZA_LOGIN_NEEDED);
    //    CASE_RETURN_NAME(ERROR_INTERNET_SEC_CERT_ERRORS);
    //    CASE_RETURN_NAME(ERROR_INTERNET_SEC_CERT_NO_REV);
    //    CASE_RETURN_NAME(ERROR_INTERNET_SEC_CERT_REV_FAILED);

    //    CASE_RETURN_NAME(ERROR_HTTP_HEADER_NOT_FOUND);
    //    CASE_RETURN_NAME(ERROR_HTTP_DOWNLEVEL_SERVER);
    //    CASE_RETURN_NAME(ERROR_HTTP_INVALID_SERVER_RESPONSE);
    //    CASE_RETURN_NAME(ERROR_HTTP_INVALID_HEADER);
    //    CASE_RETURN_NAME(ERROR_HTTP_INVALID_QUERY_REQUEST);
    //    CASE_RETURN_NAME(ERROR_HTTP_HEADER_ALREADY_EXISTS);
    //    CASE_RETURN_NAME(ERROR_HTTP_REDIRECT_FAILED);
    //    CASE_RETURN_NAME(ERROR_HTTP_NOT_REDIRECTED);
    //    CASE_RETURN_NAME(ERROR_HTTP_COOKIE_NEEDS_CONFIRMATION);
    //    CASE_RETURN_NAME(ERROR_HTTP_COOKIE_DECLINED);
    //    CASE_RETURN_NAME(ERROR_HTTP_REDIRECT_NEEDS_CONFIRMATION);
    //    CASE_RETURN_NAME(ERROR_INTERNET_SECURITY_CHANNEL_ERROR);
    //    CASE_RETURN_NAME(ERROR_INTERNET_UNABLE_TO_CACHE_FILE);
    //    CASE_RETURN_NAME(ERROR_INTERNET_TCPIP_NOT_INSTALLED);
    //    CASE_RETURN_NAME(ERROR_INTERNET_DISCONNECTED);
    //    CASE_RETURN_NAME(ERROR_INTERNET_SERVER_UNREACHABLE);
    //    CASE_RETURN_NAME(ERROR_INTERNET_PROXY_SERVER_UNREACHABLE);
    //    CASE_RETURN_NAME(ERROR_INTERNET_BAD_AUTO_PROXY_SCRIPT);
    //    CASE_RETURN_NAME(ERROR_INTERNET_UNABLE_TO_DOWNLOAD_SCRIPT);
    //    CASE_RETURN_NAME(ERROR_INTERNET_SEC_INVALID_CERT);
    //    CASE_RETURN_NAME(ERROR_INTERNET_SEC_CERT_REVOKED);
    //    CASE_RETURN_NAME(ERROR_INTERNET_FAILED_DUETOSECURITYCHECK);
    //    CASE_RETURN_NAME(ERROR_INTERNET_NOT_INITIALIZED);
    //    CASE_RETURN_NAME(ERROR_INTERNET_NEED_MSN_SSPI_PKG);
    //    CASE_RETURN_NAME(ERROR_INTERNET_LOGIN_FAILURE_DISPLAY_ENTITY_BODY);
    //    CASE_RETURN_NAME(ERROR_INTERNET_DECODING_FAILED);
    //}

    // Include the error code, so that it still makes sense if the error message is in a foreign language.
    _com_error error(hr);
    return FormatString(L"(0x%08X) %s", hr, error.ErrorMessage());
}

std::wstring GetWindowsErrorMessage(unsigned long errorCode)
{
    return GetWindowsErrorMessage(ATL::AtlHresultFromWin32(errorCode));
}

std::wstring GetLastWindowsErrorMessage()
{
    return GetWindowsErrorMessage(ATL::AtlHresultFromLastError());
}

